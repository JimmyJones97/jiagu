#pragma once
#include <fstream>
#include <map>
#include <jni.h>
using namespace std;

typedef struct MethodCode {
unsigned int dexoff;		/* offset to dexfile for code section of a specific method */
unsigned int dexsize;
unsigned int codedataoff;
unsigned int codelen;	/* length of code section */
}METHODCODE;

typedef struct ClassData {
	char *className;
	unsigned int methodSize;
	METHODCODE codeList[1];
}CLASSDATA;

typedef struct cln {
	char *name;
}CLN;


typedef struct FileType
{
	unsigned int classSize;
	CLASSDATA *classList[1];
}FILETYPE;

typedef struct mapl {
	unsigned int methodsize;
	unsigned int encodesum;
	unsigned int encodeoff;
	METHODCODE *methodcode;
}Mapl;

typedef map<string, mapl> MY_MAP;
extern MY_MAP my_Map;

extern double writebacktme;
extern unsigned int odexoffdex;

typedef uint8_t u1;
extern u1 *odexmemoff;
extern unsigned char *encdata;
extern unsigned char *M;
extern unsigned int *table;
extern FILETYPE *fileType;

void analysis_class_file(fstream& classFile, unsigned char tkey[]);
unsigned int getdexoff(char pk_name[]);
void stroeodexbuf(u1 *todexmemoff,size_t length);
void cppkname(char pk_tname[]);
void stroeoatbuf(u1 *todexmemoff, size_t length);
/* DO NOT EDIT THIS FILE - it is machine generated */

/* Header for class com_example_forshell_CustomerClassLoader */

#ifndef _Included_com_example_forshell_CustomerClassLoader
#define _Included_com_example_forshell_CustomerClassLoader
#ifdef __cplusplus
extern "C" {
#endif
#undef com_example_forshell_CustomerClassLoader_VERBOSE_DEBUG
#define com_example_forshell_CustomerClassLoader_VERBOSE_DEBUG 0L
/*
 * Class:     com_example_forshell_CustomerClassLoader
 * Method:    writeback
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_example_forshell_CustomerClassLoader_writeback
  (JNIEnv *, jclass, jstring);

#ifdef __cplusplus
}
#endif
#endif
